(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Point = (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.prototype.add = function (point) {
        this.x += point.x;
        this.y += point.y;
    };
    return Point;
}());
var Rect = (function () {
    function Rect(left, top, right, bottom) {
        this.topLeft = new Point(left, top);
        this.bottomRight = new Point(right, bottom);
    }
    Rect.prototype.add = function (point) {
        this.topLeft.add(point);
        this.bottomRight.add(point);
    };
    return Rect;
}());
var Ball = (function (_super) {
    __extends(Ball, _super);
    function Ball(radius, posX, posY, dirX, dirY) {
        _super.call(this, posX, posY, posX + 2 * radius, posY + 2 * radius);
        this.radius = radius;
        this.pos = new Point(posX, posY);
        this.dir = new Point(dirX, dirY);
    }
    Ball.prototype.move = function () {
        if (this.pos.x + this.dir.x <= this.min.x) {
            this.dir.x *= -1;
        }
        if (this.pos.y + this.dir.y <= this.min.y) {
            this.dir.y *= -1;
        }
        if (this.pos.x + this.dir.x + this.radius * 2 >= this.max.x) {
            this.dir.x *= -1;
        }
        if (this.pos.y + this.dir.y + this.radius * 2 >= this.max.y) {
            this.dir.y *= -1;
        }
        this.pos.add(this.dir);
        return this.pos;
    };
    Ball.prototype.setConstraints = function (minX, minY, maxX, maxY) {
        this.min = new Point(minX, minY);
        this.max = new Point(maxX, maxY);
    };
    return Ball;
}(Rect));
var ballElement = document.querySelectorAll('.ball')[0];
var boardElement = document.querySelectorAll('.game-board')[0];
var ball = new Ball(parseInt(getComputedStyle(ballElement)['border-top-left-radius']), ballElement.offsetLeft, ballElement.offsetTop, 1, -1);
ball.setConstraints(0, 0, boardElement.offsetWidth, boardElement.offsetHeight);
setInterval(function () {
    var _a = ball.move(), posX = _a.x, posY = _a.y;
    ballElement.style.left = posX + 'px';
    ballElement.style.top = posY + 'px';
}, 15);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHBsaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FDQUE7SUFHRyxlQUFZLENBQVMsRUFBRSxDQUFTO1FBQzlCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsbUJBQUcsR0FBSCxVQUFJLEtBQVk7UUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ25CLENBQUM7SUFDSixZQUFDO0FBQUQsQ0FaQSxBQVlDLElBQUE7QUFFRDtJQUlFLGNBQVksSUFBWSxFQUFFLEdBQVcsRUFBRSxLQUFhLEVBQUUsTUFBYztRQUNsRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsa0JBQUcsR0FBSCxVQUFJLEtBQVk7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUgsV0FBQztBQUFELENBZEEsQUFjQyxJQUFBO0FBRUQ7SUFBbUIsd0JBQUk7SUFPckIsY0FBWSxNQUFjLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWTtRQUNoRixrQkFBTSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksR0FBRyxDQUFDLEdBQUcsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLEdB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RUFBRSxXQUFPLENBQWdCO0lBRXJDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUV0QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJjbGFzcyBQb2ludCB7XG4gICB4OiBudW1iZXI7XG4gICB5OiBudW1iZXI7XG4gICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICB0aGlzLnggPSB4O1xuICAgICB0aGlzLnkgPSB5O1xuICAgfVxuXG4gICBhZGQocG9pbnQ6IFBvaW50KSB7XG4gICAgIHRoaXMueCArPSBwb2ludC54O1xuICAgICB0aGlzLnkgKz0gcG9pbnQueVxuICAgfVxufVxuXG5jbGFzcyBSZWN0IHtcbiAgdG9wTGVmdDogUG9pbnQ7XG4gIGJvdHRvbVJpZ2h0OiBQb2ludDtcblxuICBjb25zdHJ1Y3RvcihsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlcikge1xuICAgIHRoaXMudG9wTGVmdCA9IG5ldyBQb2ludChsZWZ0LCB0b3ApO1xuICAgIHRoaXMuYm90dG9tUmlnaHQgPSBuZXcgUG9pbnQocmlnaHQsIGJvdHRvbSk7XG4gIH1cblxuICBhZGQocG9pbnQ6IFBvaW50KSB7XG4gICAgdGhpcy50b3BMZWZ0LmFkZChwb2ludCk7XG4gICAgdGhpcy5ib3R0b21SaWdodC5hZGQocG9pbnQpO1xuICB9XG5cbn1cblxuY2xhc3MgQmFsbCBleHRlbmRzIFJlY3Qge1xuICByYWRpdXM6IG51bWJlcjtcbiAgcG9zOiBQb2ludDtcbiAgZGlyOiBQb2ludDtcbiAgbWluOiBQb2ludDtcbiAgbWF4OiBQb2ludDtcblxuICBjb25zdHJ1Y3RvcihyYWRpdXM6IG51bWJlciwgcG9zWDogbnVtYmVyLCBwb3NZOiBudW1iZXIsIGRpclg6IG51bWJlciwgZGlyWTogbnVtYmVyKSB7XG4gICAgc3VwZXIocG9zWCwgcG9zWSwgcG9zWCArIDIgKiByYWRpdXMsIHBvc1kgKyAyICogcmFkaXVzKTtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICB0aGlzLnBvcyA9IG5ldyBQb2ludChwb3NYLCBwb3NZKTtcbiAgICB0aGlzLmRpciA9IG5ldyBQb2ludChkaXJYLCBkaXJZKTtcbiAgfVxuXG4gIG1vdmUoKTogUG9pbnQge1xuICAgIGlmKHRoaXMucG9zLnggKyB0aGlzLmRpci54IDw9IHRoaXMubWluLngpIHtcbiAgICAgIHRoaXMuZGlyLnggKj0gLTE7XG4gICAgfVxuICAgIGlmKHRoaXMucG9zLnkgKyB0aGlzLmRpci55IDw9IHRoaXMubWluLnkpIHtcbiAgICAgIHRoaXMuZGlyLnkgKj0gLTE7XG4gICAgfVxuICAgIGlmKHRoaXMucG9zLnggKyB0aGlzLmRpci54ICsgdGhpcy5yYWRpdXMgKiAyID49IHRoaXMubWF4LngpIHtcbiAgICAgIHRoaXMuZGlyLnggKj0gLTE7XG4gICAgfVxuICAgIGlmKHRoaXMucG9zLnkgKyB0aGlzLmRpci55KyB0aGlzLnJhZGl1cyAqIDIgPj0gdGhpcy5tYXgueSkge1xuICAgICAgdGhpcy5kaXIueSAqPSAtMTtcbiAgICB9XG4gICAgdGhpcy5wb3MuYWRkKHRoaXMuZGlyKTtcblxuICAgIHJldHVybiB0aGlzLnBvcztcbiAgfVxuXG4gIHNldENvbnN0cmFpbnRzKG1pblg6IG51bWJlciwgbWluWTogbnVtYmVyLCBtYXhYOiBudW1iZXIsIG1heFk6IG51bWJlcikge1xuICAgIHRoaXMubWluID0gbmV3IFBvaW50KG1pblgsIG1pblkpO1xuICAgIHRoaXMubWF4ID0gbmV3IFBvaW50KG1heFgsIG1heFkpO1xuICB9XG5cbn1cblxudmFyIGJhbGxFbGVtZW50IDogSFRNTEVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhbGwnKVswXTtcbnZhciBib2FyZEVsZW1lbnQgOiBIVE1MRWxlbWVudCA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FtZS1ib2FyZCcpWzBdO1xuXG52YXIgYmFsbCA9IG5ldyBCYWxsKHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoYmFsbEVsZW1lbnQpWydib3JkZXItdG9wLWxlZnQtcmFkaXVzJ10pLCBiYWxsRWxlbWVudC5vZmZzZXRMZWZ0LCBiYWxsRWxlbWVudC5vZmZzZXRUb3AsIDEsIC0xKTtcbmJhbGwuc2V0Q29uc3RyYWludHMoMCwwLCBib2FyZEVsZW1lbnQub2Zmc2V0V2lkdGgsIGJvYXJkRWxlbWVudC5vZmZzZXRIZWlnaHQpO1xuXG5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gIGxldCB7eDogcG9zWCwgeTogcG9zWX0gPSBiYWxsLm1vdmUoKTtcblxuICBiYWxsRWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zWCArICdweCc7XG4gIGJhbGxFbGVtZW50LnN0eWxlLnRvcCA9IHBvc1kgKyAncHgnO1xuXG59LCAxNSk7Il19
